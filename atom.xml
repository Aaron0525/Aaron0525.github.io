<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>途中人的博客</title>
  <subtitle>IT技术分享！</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://upyang.com/"/>
  <updated>2017-07-26T15:14:48.353Z</updated>
  <id>http://upyang.com/</id>
  
  <author>
    <name>途中人</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Vue项目上传github并预览</title>
    <link href="http://upyang.com/2017/07/25/Vue%E9%A1%B9%E7%9B%AE%E4%B8%8A%E4%BC%A0github%E5%B9%B6%E9%A2%84%E8%A7%88/"/>
    <id>http://upyang.com/2017/07/25/Vue项目上传github并预览/</id>
    <published>2017-07-25T08:05:27.000Z</published>
    <updated>2017-07-26T15:14:48.353Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>最近在初步完成自己的<a href="https://github.com/Aaron0525/Vue-juejin-App" target="_blank" rel="external">掘金移动端App</a>后，想要上传到github，并且制作一个简单的预览功能，期间遇到了一些问题，分享在此，以便查阅。</p>
<h1 id="打包Vue项目"><a href="#打包Vue项目" class="headerlink" title="打包Vue项目"></a>打包Vue项目</h1><p>当Vue项目完成后，在根目录下打开命令行，输入命令：</p>
<blockquote>
<p>npm run build</p>
</blockquote>
<p>实际上此命令就是执行build.js文件，将项目打包成静态资源。<br>此命令完成后，项目根目录下会多出一个dist文件夹，dist文件里面有：<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://oszamq4pp.bkt.clouddn.com/17-7-25/30082494.jpg" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure><br>static文件下包括项目打包后的css、js、img、fonts(字体图标)。</p>
<h1 id="项目资源无法加载"><a href="#项目资源无法加载" class="headerlink" title="项目资源无法加载"></a>项目资源无法加载</h1><p>点击index.html,浏览器显示该页面是空白的，打开控制台看到：<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://oszamq4pp.bkt.clouddn.com/17-7-25/5971079.jpg" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure><br>这里看到index.html文件中没有加载任何css、js文件，解决方法：</p>
<ul>
<li>打开项目根目录　config　下的　index.js　文件，进行如下修改：<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://oszamq4pp.bkt.clouddn.com/17-7-25/15749381.jpg" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure></li>
<li>将　assetsPublicPath: ‘/‘,　改为　assetsPublicPath: ‘./‘,</li>
</ul>
<p>保存后重新’npm run build’,在新生成的dist目录下点开index.html，这时页面结构正常显示出来了，但是页面字体图标和mock的数据无法正常加载。</p>
<h1 id="字体图标无法加载"><a href="#字体图标无法加载" class="headerlink" title="字体图标无法加载"></a>字体图标无法加载</h1><p>页面中用background加载的图片可以正常显示，但是所有的字体图标都不能正常显示，解决方法：打开根目录下　build　中的　utils.js　文件，在控制build样式文件代码中添加　publicPath: ‘../../‘，　如下：<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://oszamq4pp.bkt.clouddn.com/17-7-25/63452149.jpg" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure><br>保存后，依旧重新’npm run build’,打开dist目录下的index.js可以看到字体图标正常显示了。<br>这里为什么需要这样修改，可以参考<a href="https://github.com/vuejs-templates/webpack/issues/166。" target="_blank" rel="external">https://github.com/vuejs-templates/webpack/issues/166。</a></p>
<h1 id="Mock数据无法正常加载"><a href="#Mock数据无法正常加载" class="headerlink" title="Mock数据无法正常加载"></a>Mock数据无法正常加载</h1><p>此项目的绝大部分页面内容是通过在跟目录下创建的data.json文件渲染到页面上的，是模拟从后端请求数据的，开发调试时用’npm run dev’命令，会借助node启动一个本地服务器，可以正常的渲染出相应的数据。而通过打包后的项目时属于静态资源的，点击index.html查看项目，是无法加载mock的数据的，浏览器也会报跨域的错误。若想正常的加载mock数据，最好的方式是讲打包后的资源丢到服务器中。</p>
<h1 id="利用git命令将项目上传到github"><a href="#利用git命令将项目上传到github" class="headerlink" title="利用git命令将项目上传到github"></a>利用git命令将项目上传到github</h1><p>首先设置SSH key,网上的教程很多，推荐一个简书里面的<a href="http://www.jianshu.com/p/c70ca3a02087" target="_blank" rel="external">两种方法上传本地文件到github</a>,完成后在github里面新建一个一个存放项目的仓库(建议勾选上初始化)，git命令：</p>
<p>1、先进入项目文件夹，通过命令 git init 把这个目录变成git可以管理的仓库</p>
<blockquote>
<p>git init</p>
</blockquote>
<p>2、把文件添加到版本库中，使用命令 git add .添加到暂存区里面去，不要忘记后面的小数点“.”，意思为添加文件夹下的所有文件。</p>
<blockquote>
<p>git add .</p>
</blockquote>
<p>3、用命令 git commit告诉Git，把文件提交到仓库。引号内为提交说明。</p>
<blockquote>
<p>git commit -m ‘message’</p>
</blockquote>
<p>4、关联到远程库。</p>
<blockquote>
<p>git remote add origin 你的远程库地(如：<a href="https://github.com/Aaron0525/Vue-juejin-App.git" target="_blank" rel="external">https://github.com/Aaron0525/Vue-juejin-App.git</a>)</p>
</blockquote>
<p>5、将项目所有push文件到仓库中。</p>
<blockquote>
<p>git push -u origin master</p>
</blockquote>
<ul>
<li>第五步操作时，有时会失败，我的方法是将 u 改为 f 来提交，即输入命令git push -f origin master<br>回到github中该项目的仓库，项目文件就提交上去了，若失败，请仔细核对步骤。</li>
</ul>
<h1 id="制作github在线预览效果"><a href="#制作github在线预览效果" class="headerlink" title="制作github在线预览效果"></a>制作github在线预览效果</h1><p>  github制作预览是需要利用GitHub Pages的，点击项目仓库的setting,找到source,切换到master branch,点击保存。<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://oszamq4pp.bkt.clouddn.com/17-7-25/53441109.jpg" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure><br>点击GitHub Pages下面出现的网址即为预览地址，但是此时点击进去会发现没有页面效果，没关系，下面继续：</p>
<p>我们生成githubPages的目的就是需要生成一个gh-pages分支(正常情况下只有一个master分支)。</p>
<p>生成gh-pages分支步骤：</p>
<p>1、将远程仓库克隆到本地：</p>
<blockquote>
<p>git clone <a href="https://github.com/Aaron0525/Vue-juejin-App.git(项目克隆地址" target="_blank" rel="external">https://github.com/Aaron0525/Vue-juejin-App.git(项目克隆地址</a>)</p>
</blockquote>
<p>2、生成分支gh-pages并切换到此分支</p>
<blockquote>
<p>cd flexSupplement （进入到你克隆仓库的本地文件夹）<br>  git checkout - -orphan gh-pages (创建分支并切换，两个横杆)</p>
</blockquote>
<p>3、将本地克隆文件(文件名为github仓库名)里面除.git文件以外的其他文件全部删除，再将根目录下dist文件夹里面的内容复制到克隆文件中。</p>
<blockquote>
<p>依次执行以下命令：<br>  git add . （将本地所有文件加到仓库里）<br>  git commit -m “message” （设置提交信息）<br>  git remote add origin <a href="https://github.com/Aaron0525/" target="_blank" rel="external">https://github.com/Aaron0525/</a>　Vue-juejin-App.git（本地仓库链接远程仓库）<br>  git push -u origin gh-pages （push文件到仓库中）</p>
</blockquote>
<p>完成以上步骤后，回到github里面，点击上面说到的GitHub Pages下面的地址，既能预览效果，注意耐心等待一小会，跟新同步还是需要一个过程的，同样这里面还是无法显示mock的数据。</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>   github，这个星球上最流行的开源托管服务的分布式网站，作为程序员，掌握基本的github使用方法，无论是对于分享、托管自己的项目，还是查阅其他优秀的开源项目，都是十分有帮助的。<br>   以下是我的一些项目演示：</p>
<p>   <a href="https://github.com/Aaron0525/Vue-music" target="_blank" rel="external">Vue2.0移动端以音乐播放器</a><br>   <a href="https://github.com/Aaron0525/Vue-juejin-App" target="_blank" rel="external">Vue2.0模仿掘金App</a><br>   <a href="https://github.com/Aaron0525/Responsive-website" target="_blank" rel="external">响应式网站</a></p>
<p>   觉得有用的，可以给个start哦！ 感谢！！！</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;最近在初步完成自己的&lt;a href=&quot;https://github.com/Aaron0525/Vue-juejin-App&quot; target
    
    </summary>
    
    
      <category term="Vue2.0" scheme="http://upyang.com/tags/Vue2-0/"/>
    
      <category term="github" scheme="http://upyang.com/tags/github/"/>
    
  </entry>
  
  <entry>
    <title>Vue2.0仿掘金App(总结)</title>
    <link href="http://upyang.com/2017/07/21/Vue%E5%AD%A6%E4%B9%A0/"/>
    <id>http://upyang.com/2017/07/21/Vue学习/</id>
    <published>2017-07-21T15:28:51.000Z</published>
    <updated>2017-07-28T03:09:12.451Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>　　最近一段时间一直在学习Vue2.0的相关知识，之前只是看过相关的视频教学，但是一直没有动手去实践自己的项目，这次决定用Vue2.0去模仿一个移动端App,看了很多自己用过的App,最后决定模仿做掘金移动端App,恰好这款App也是用Vue做的。写下这篇博客，记录实践中的心得体会。</p>
<h2 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h2><p>首先直观的看下掘金App的基本页面构成：</p>
<p><img src="http://oszamq4pp.bkt.clouddn.com/17-7-22/81795026.jpg" width="300" height="500" style="float:left;margin-right: 30px;margin-bottom: 20px;border: 1px solid #E8E1E1;"><img src="http://oszamq4pp.bkt.clouddn.com/17-7-23/6318549.jpg" width="300" height="500" style="float:left;margin-right: 30px; margin-bottom: 20px;border: 1px solid #E8E1E1;"><img src="http://oszamq4pp.bkt.clouddn.com/17-7-23/79170730.jpg" width="300" height="500" style="float: left;margin-right: 30px;border: 1px solid #E8E1E1;"><img src="http://oszamq4pp.bkt.clouddn.com/17-7-23/46672523.jpg" width="300" height="500" style="margin-right: 30px;border: 1px solid #E8E1E1;"></p>
<p> 通过观察分析，总结出以下几点：</p>
<ul>
<li>首页，底部和顶部分别有tab切换，在Vue中可以通过配置嵌套路由来实现。</li>
<li>发现页，顶部有一个轮播图，数据要求实时跟新。因为之前有在做<a href="http://localhost:4000/categories/" target="_blank" rel="external">Vue-music</a>时有做过一个数据实时跟新的轮播图,这里直接引用过来，后面也会具体去讲怎么实现。沸点栏，有一个左右可以滑动的新闻栏。</li>
<li>消息、我的信息页面基本上都是数据交互，其中我的信息里面会包含一个h5调用摄像头、相册的功能。</li>
<li>项目中用到的字体图标采用阿里的iconfont,一些无法搜索到的图片，用firework切图工具切出来。</li>
</ul>
<h2 id="项目构建"><a href="#项目构建" class="headerlink" title="项目构建"></a>项目构建</h2><p>这里基本的node、git的安装就不一一介绍了，网上有很多相关的教程。选用webpack、vue-cli脚手架来快速搭建我们的项目骨架。</p>
<ul>
<li>Vue创建项目命令：<blockquote>
<p>Vue init webpack juejin</p>
</blockquote>
</li>
</ul>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://oszamq4pp.bkt.clouddn.com/17-7-23/77103498.jpg" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>根据提示完成相应的项目基本信息，个人意愿选择是否使用ESlint、单元测试、端到端测试等等,建议新手不使用ESlint做代码格式检查，不然可能在写的过程中遇到非常多代码格式错误，当然选择使用的话也有好处，能很好的规范自己的代码风格。</p>
<ul>
<li>完成项目构建后，对目录进行修改，修改完成后如下：<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://oszamq4pp.bkt.clouddn.com/17-7-23/4776956.jpg" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<h3 id="目录介绍"><a href="#目录介绍" class="headerlink" title="目录介绍"></a>目录介绍</h3></li>
<li>api: 存放jsonp请求轮播图数据的js文件</li>
<li>base: 存放项目的基础组件，例如：轮播图组件(slider)、新闻列表组件(newslist)、新闻详情listdetail)、搜索组件(search)、修改个人信息组件(modify)等.</li>
<li>common: 存放fonts、image、js、stylus文件。</li>
<li>components: 存放项目的主要组件</li>
<li>router: 路由配置</li>
<li>需要注意的是，因为想要模拟从后端获取数据并绑定到组件上，而不是把数据写死在结构上，所以这里在根目录新建了一个data.json的文件，里面写好了项目需要用到的数据。<h3 id="package-json配置依赖"><a href="#package-json配置依赖" class="headerlink" title="package.json配置依赖"></a>package.json配置依赖</h3><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://oszamq4pp.bkt.clouddn.com/17-7-23/33192057.jpg" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<blockquote>
<p>npm install</p>
</blockquote>
</li>
</ul>
<p>node_modules文件目录下查看到以上的依赖包，说明安装成功了。注意：因为项目用到的reset重置样式文件(copy来的)是stylus格式，所以还需要在devDependencies中配置stylus和stylus-loader依赖。</p>
<h3 id="文件路径配置"><a href="#文件路径配置" class="headerlink" title="文件路径配置"></a>文件路径配置</h3><p>项目中会经常引入各种文件，为了引用方便会进行以下配置，觉得没必要的可以忽略。</p>
<ul>
<li>打开build目录下的webpack.base.conf.js文件，在resolve下进行以下配置<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://oszamq4pp.bkt.clouddn.com/17-7-23/82258197.jpg" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure></li>
<li>这样的好处是引用某个文件的时候不用每次都带上一堆的前缀。<h3 id="引入字体图标"><a href="#引入字体图标" class="headerlink" title="引入字体图标"></a>引入字体图标</h3>前面说到本项目用的是阿里iconfont字体图标库，选择好所要用到的图标之后下载到本地，将其中除了3个html演示文件以外的其他7个文件拷贝到common/fonts目录下，然后将iconfont.css文件里的内容拷贝到common/stylus/icon.styl中,首先要修改的是引用路径，其他根据需要自行修改字体图标的基本样式。<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://oszamq4pp.bkt.clouddn.com/17-7-23/43259474.jpg" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://oszamq4pp.bkt.clouddn.com/17-7-23/23822432.jpg" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure></li>
<li>测试字体图标是否引用成功：根目录main.js下 import ‘./common/stylus/icon.styl’，然后在组件中引用一个字体图标，用浏览器查看是否引用成功。<h3 id="Express获取data-json数据的路由配置"><a href="#Express获取data-json数据的路由配置" class="headerlink" title="Express获取data.json数据的路由配置"></a>Express获取data.json数据的路由配置</h3>data.json文件数据结构如下：<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://oszamq4pp.bkt.clouddn.com/17-7-23/59387298.jpg" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
接下来配置Express路由，本项目只涉及到get数据，所以只进行了简单的路由配置，Express的详细使用可以查看<a href="http://www.expressjs.com.cn/" target="_blank" rel="external">Express官网</a>,打开build.js文件下的dev-server.js文件，进行以下配置：<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://oszamq4pp.bkt.clouddn.com/17-7-23/82175984.jpg" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
npm run dev重启服务器，浏览器访问<code>localhost:8080/api/infor</code>,若能看到如data.json/infor里面的数据说明已经配置成功了。</li>
</ul>
<h2 id="页面嵌套路由配置"><a href="#页面嵌套路由配置" class="headerlink" title="页面嵌套路由配置"></a>页面嵌套路由配置</h2><p>前面讲到本项目需要配置嵌套路由，首先看一下路由组件的目录结构：components目录下除了四个主要页面组件，还需要在home目录下新建五个子路由对应的组件。<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://oszamq4pp.bkt.clouddn.com/17-7-23/38824633.jpg" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure><br>打开router下的index文件进行如下配置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div></pre></td><td class="code"><pre><div class="line">import Vue from &apos;vue&apos;</div><div class="line">import Router from &apos;vue-router&apos;</div><div class="line">import Home from &apos;../components/home/home&apos;</div><div class="line">import Find from &apos;../components/find/find&apos;</div><div class="line">import Infor from &apos;../components/infor/infor&apos;</div><div class="line">import My from &apos;../components/my/my&apos;</div><div class="line">import Homepage from &apos;../components/home/homepage/homepage&apos;</div><div class="line">import Frontend from &apos;../components/home/frontend/frontend&apos;</div><div class="line">import Product from &apos;../components/home/product/product&apos;</div><div class="line">import Design from &apos;../components/home/design/design&apos;</div><div class="line">import Afterend from &apos;../components/home/afterend/afterend&apos;</div><div class="line"></div><div class="line">Vue.use(Router)</div><div class="line"></div><div class="line">export default new Router(&#123;</div><div class="line">  routes: [</div><div class="line">    &#123;</div><div class="line">      path: &apos;/&apos;,</div><div class="line">      redirect: &apos;./home&apos;</div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      path: &apos;/home&apos;,</div><div class="line">      component: Home,</div><div class="line">      children: [</div><div class="line">        &#123;</div><div class="line">          path: &apos;/&apos;,</div><div class="line">          redirect: &apos;./homepage&apos;</div><div class="line">        &#125;,</div><div class="line">        &#123;</div><div class="line">          path: &apos;/home/homepage&apos;,</div><div class="line">          component: Homepage</div><div class="line">        &#125;,</div><div class="line">        &#123;</div><div class="line">          path: &apos;/home/frontend&apos;,</div><div class="line">          component: Frontend</div><div class="line">        &#125;,</div><div class="line">        &#123;</div><div class="line">          path: &apos;/home/product&apos;,</div><div class="line">          component: Product</div><div class="line">        &#125;,</div><div class="line">        &#123;</div><div class="line">          path: &apos;/home/design&apos;,</div><div class="line">          component: Design</div><div class="line">        &#125;,</div><div class="line">        &#123;</div><div class="line">          path: &apos;/home/afterend&apos;,</div><div class="line">          component: Afterend</div><div class="line">        &#125;</div><div class="line">      ]</div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      path: &apos;/find&apos;,</div><div class="line">      component: Find</div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      path: &apos;/infor&apos;,</div><div class="line">      component: Infor</div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      path: &apos;/my&apos;,</div><div class="line">      component: My</div><div class="line">    &#125;</div><div class="line">  ]</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<p> <code>redirect: &#39;./home&#39;</code>，redirect重定向是规定运行项目后首次显示的页面，这里定向到home首页，子路由中同样需要重定向<code>redirect: &#39;./homepage&#39;</code>。观察可以发现主路由首次显示的页面内容是和子路由首次显示的页面内容是一样的，那么，我们是否可以用同一个组件呢?百般尝试后没有成功，因为主路由home页面渲染出来后，内容上是包含顶部的tab切换的(也就是子路由)，所以前面说到的内容一样其实是个伪命题，那么子路由的重定向不能是home而是homepage，公用的页面内容写在homepage里面。</p>
<p> 接下来编写主路由和子路由的tab组件<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"> &lt;!-- 底部tab，顶部同理  --&gt;</div><div class="line">&lt;template&gt;</div><div class="line">  &lt;div class=&quot;tab&quot;&gt;</div><div class="line">    &lt;router-link tag=&quot;div&quot; class=&quot;tab-item&quot; to=&quot;/home&quot;&gt;</div><div class="line">      &lt;div class=&quot;tab-link&quot;&gt;</div><div class="line">        &lt;div class=&quot;ic_container&quot;&gt;&lt;i class=&quot;iconfont ic home&quot;&gt;&amp;#xe6a6;&lt;/i&gt;&lt;/div&gt;</div><div class="line">        &lt;span&gt;首页&lt;/span&gt;</div><div class="line">      &lt;/div&gt;</div><div class="line">    &lt;/router-link&gt;</div><div class="line">    &lt;router-link tag=&quot;div&quot; class=&quot;tab-item&quot; to=&quot;/find&quot;&gt;</div><div class="line">      &lt;div class=&quot;tab-link&quot;&gt;</div><div class="line">        &lt;div class=&quot;ic_container&quot;&gt;&lt;i class=&quot;iconfont ic find&quot;&gt;&amp;#xe669;&lt;/i&gt;&lt;/div&gt;</div><div class="line">        &lt;span&gt;发现&lt;/span&gt;</div><div class="line">      &lt;/div&gt;</div><div class="line">    &lt;/router-link&gt;</div><div class="line">    &lt;router-link tag=&quot;div&quot; class=&quot;tab-item&quot; to=&quot;/infor&quot;&gt;</div><div class="line">      &lt;div class=&quot;tab-link&quot;&gt;</div><div class="line">        &lt;div class=&quot;ic_container&quot;&gt;&lt;i class=&quot;iconfont ic message&quot;&gt;&amp;#xe62d;&lt;/i&gt;&lt;/div&gt;</div><div class="line">        &lt;span&gt;消息&lt;/span&gt;</div><div class="line">      &lt;/div&gt;</div><div class="line">    &lt;/router-link&gt;</div><div class="line">    &lt;router-link tag=&quot;div&quot; class=&quot;tab-item&quot; to=&quot;/my&quot;&gt;</div><div class="line">      &lt;div class=&quot;tab-link&quot;&gt;</div><div class="line">        &lt;div class=&quot;ic_container&quot;&gt;&lt;i class=&quot;iconfont ic my&quot;&gt;&amp;#xe705;&lt;/i&gt;&lt;/div&gt;</div><div class="line">        &lt;span&gt;我的&lt;/span&gt;</div><div class="line">      &lt;/div&gt;</div><div class="line">    &lt;/router-link&gt;</div><div class="line">  &lt;/div&gt;</div><div class="line">&lt;/template&gt;</div></pre></td></tr></table></figure></p>
<blockquote>
<p>注意：检查路由是否配置成功不仅仅要看是否能正常切换，还需要观察地址栏路径变化，是否符合逻辑。<br>底部点击切换时，<a href="http://localhost:8080/#/[home,find,infor,my]四个地址之间切换。" target="_blank" rel="external">http://localhost:8080/#/[home,find,infor,my]四个地址之间切换。</a><br>点击顶部路由时，<a href="http://localhost:8080/#/home/[homepage,frontend,product,design,afterend]五个地址之间切换。" target="_blank" rel="external">http://localhost:8080/#/home/[homepage,frontend,product,design,afterend]五个地址之间切换。</a></p>
</blockquote>
<h2 id="发现页轮播图"><a href="#发现页轮播图" class="headerlink" title="发现页轮播图"></a>发现页轮播图</h2><p>轮播图对于前端工程师来说十分常见，以往的轮播图数据都是写死的，不能变化，这次希望模仿出来的掘金App更加真实，所以做了一个数据可变的的轮播图。很遗憾，掘金App上的轮播图数据暂时没有想到好的办法去拿到，chrome网页版掘金切换到手机模式依旧没有轮播图数据。这里选用的是QQ音乐首页轮播图数据，究竟怎么拿到数据并显示呢？</p>
<h3 id="jsonp封装"><a href="#jsonp封装" class="headerlink" title="jsonp封装"></a>jsonp封装</h3><p>安装好jsonp依赖后，需要对jsonp进行简单的封装:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line">import jsonp from &apos;common/js/jsonp&apos;</div><div class="line">import &#123;commonParams, options&#125; from &apos;./config&apos;</div><div class="line">import axios from &apos;axios&apos;</div><div class="line"></div><div class="line">export function getRecommend() &#123;</div><div class="line">  const url = &apos;https://c.y.qq.com/musichall/fcgi-bin/fcg_yqqhomepagerecommend.fcg&apos;</div><div class="line"></div><div class="line">  const data = Object.assign(&#123;&#125;, commonParams, &#123;</div><div class="line">    platform: &apos;h5&apos;,</div><div class="line">    uin: 0,</div><div class="line">    needNewCode: 1</div><div class="line">  &#125;)</div><div class="line"></div><div class="line">  return jsonp(url, data, options)</div><div class="line">&#125;</div><div class="line"></div><div class="line">export function getDiscList() &#123;</div><div class="line">  const url = &apos;/api/getDiscList&apos;</div><div class="line"></div><div class="line">  const data = Object.assign(&#123;&#125;, commonParams, &#123;</div><div class="line">    platform: &apos;yqq&apos;,</div><div class="line">    hostUin: 0,</div><div class="line">    sin: 0,</div><div class="line">    ein: 29,</div><div class="line">    sortId: 5,</div><div class="line">    needNewCode: 0,</div><div class="line">    categoryId: 10000000,</div><div class="line">    rnd: Math.random(),</div><div class="line">    format: &apos;json&apos;</div><div class="line">  &#125;)</div><div class="line"></div><div class="line">  return axios.get(url, &#123;</div><div class="line">    params: data</div><div class="line">  &#125;).then((res) =&gt; &#123;</div><div class="line">    return Promise.resolve(res.data)</div><div class="line">  &#125;)</div><div class="line">&#125;</div><div class="line"></div><div class="line">export function getSongList(disstid) &#123;</div><div class="line">  const url = &apos;https://c.y.qq.com/qzone/fcg-bin/fcg_ucc_getcdinfo_byids_cp.fcg&apos;</div><div class="line"></div><div class="line">  const data = Object.assign(&#123;&#125;, commonParams, &#123;</div><div class="line">    disstid,</div><div class="line">    type: 1,</div><div class="line">    json: 1,</div><div class="line">    utf8: 1,</div><div class="line">    onlysong: 0,</div><div class="line">    platform: &apos;yqq&apos;,</div><div class="line">    hostUin: 0,</div><div class="line">    needNewCode: 0</div><div class="line">  &#125;)</div><div class="line"></div><div class="line">  return jsonp(url, data, options)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>获取数据后渲染到组件中：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&lt;div class=&quot;recommend&quot;&gt;</div><div class="line">    &lt;div class=&quot;recommend-content&quot;&gt;</div><div class="line">        &lt;div v-if=&quot;recommends.length&quot; class=&quot;slider-wrapper&quot;&gt;</div><div class="line">            &lt;slider&gt;</div><div class="line">                &lt;div v-for=&quot;item in recommends&quot;&gt;</div><div class="line">                    &lt;a :href=&quot;item.linkUrl&quot;&gt;</div><div class="line">                        &lt;img :src=&quot;item.picUrl&quot;&gt;</div><div class="line">                    &lt;/a&gt;</div><div class="line">                &lt;/div&gt;</div><div class="line">            &lt;/slider&gt;</div><div class="line">        &lt;/div&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure></p>
<h3 id="better-scroll"><a href="#better-scroll" class="headerlink" title="better-scroll"></a>better-scroll</h3><h2 id="父组件与子组件数据通信"><a href="#父组件与子组件数据通信" class="headerlink" title="父组件与子组件数据通信"></a>父组件与子组件数据通信</h2><ul>
<li>在点击新闻列表后,会出现新闻详情页面，新闻详情页面是一个单独的子组件模板,里面的作者、图像、文章banner图、文章标题等一系列数据是需要在点击新闻列表后将数据传递过来并绑定在组件结构上的。</li>
</ul>
<!-- <img src="http://oszamq4pp.bkt.clouddn.com/17-7-22/81795026.jpg" width = "300" height = "500" style="float:left;margin-right: 30px;margin-bottom: 20px;border: 1px solid #E8E1E1;"/><img src="http://oszamq4pp.bkt.clouddn.com/17-7-23/62531253.jpg" width = "300" height = "500" style="float:left;margin-right: 30px; margin-bottom: 20px;border: 1px solid #E8E1E1;"/> -->
<h3 id="定义子组件："><a href="#定义子组件：" class="headerlink" title="定义子组件："></a>定义子组件：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">&lt;template&gt;</div><div class="line">  &lt;transition name=&quot;move&quot;&gt;</div><div class="line">    &lt;div v-show=&quot;showFlag&quot; class=&quot;listdetail&quot;&gt;</div><div class="line">      &lt;div class=&quot;foot&quot;&gt;</div><div class="line">        &lt;div class=&quot;like-num&quot;&gt;喜欢 &#123;&#123;list.like&#125;&#125;&lt;/div&gt;</div><div class="line">      &lt;/div&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">  &lt;/transition&gt;</div><div class="line">&lt;/template&gt;</div><div class="line"></div><div class="line">&lt;script type=&quot;text/ecmascript-6&quot;&gt;</div><div class="line">  export default &#123;</div><div class="line">    data() &#123;</div><div class="line">      return &#123;</div><div class="line">        showFlag: false</div><div class="line">      &#125;</div><div class="line">    &#125;,</div><div class="line">    props: &#123;</div><div class="line">      list: &#123;</div><div class="line">        type: Object</div><div class="line">      &#125;</div><div class="line">    &#125;,</div><div class="line">    methods: &#123;</div><div class="line">      show() &#123;</div><div class="line">        this.showFlag = true;</div><div class="line">      &#125;,</div><div class="line">      hide() &#123;</div><div class="line">        this.showFlag = false;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;;</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure>
<blockquote>
<p>在props中定义一个变量list来接受父组件传过来的数据</p>
</blockquote>
<h3 id="父组件：引入子组件listdetail并注册"><a href="#父组件：引入子组件listdetail并注册" class="headerlink" title="父组件：引入子组件listdetail并注册"></a>父组件：引入子组件listdetail并注册</h3><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://oszamq4pp.bkt.clouddn.com/17-7-23/44625871.jpg" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>父组件中新闻列表是通过v-for在li标签上渲染出来的，点击某新闻列表传给子组件的数据也必须是对应的，添加click事件@selectlist(item)，并传入一个参数item,这个item就是该新闻列表所对应的相关数据。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">&lt;!-- ref 被用来给元素或子组件注册引用信息，直接指向组件实例。 list接受数据。--&gt;</div><div class="line">&lt;listdetail :list=&quot;selectedlist&quot; ref=&quot;listdetail&quot;&gt;&lt;/listdetail&gt;</div><div class="line"></div><div class="line">&lt;!--data里面定义一个中间变量selectedlist,缓存item的数据(数据为某个新闻列表而非所有数据)并将其绑定在&lt;listdetail&gt;标签上--&gt;</div><div class="line">data: &#123;</div><div class="line">  return &#123;</div><div class="line">    selectedlist: &#123;&#125;,</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">&lt;!--定义selectlist函数，将数据赋值给中间变量selectedlist,并在点击时触发子组件的show()方法 --&gt;</div><div class="line">methods: &#123;</div><div class="line">  selectlist(item) &#123;</div><div class="line">      this.selectedlist = item;</div><div class="line">      this.$refs.listdetail.show();</div><div class="line">  &#125;,</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><ul>
<li>子组件在props中创建一个属性，用来接受父组件传过来的数据。</li>
<li>父组件中注册和引用子组件。</li>
<li>在子组件变迁中添加子组件props中创建的属性。</li>
<li>点击事件触发子组件show()方法时将数据一并赋值给改属性。</li>
<li>父组件可以调用子组件中的方法。</li>
</ul>
<h2 id="Vue中transition过渡动画"><a href="#Vue中transition过渡动画" class="headerlink" title="Vue中transition过渡动画"></a>Vue中transition过渡动画</h2><p>App很多地方会有点击后出现一个新的页面的操作，如果不做动画看起来会感觉差点什么，Vue中也提供了了过渡动画的API，官网教程：<a href="https://cn.vuejs.org/v2/guide/transitions.html。" target="_blank" rel="external">https://cn.vuejs.org/v2/guide/transitions.html。</a></p>
<p>在点击新闻列表后，会从右至左出来新闻详情页面，实现也十分简单：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">&lt;template&gt;</div><div class="line">  &lt;transition name=&quot;move&quot;&gt;</div><div class="line">    &lt;div v-show=&quot;showFlag&quot; class=&quot;listdetail&quot;&gt;</div><div class="line">        &lt;!-- 组件内容--&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">  &lt;/transition&gt;</div><div class="line">&lt;/template&gt;</div><div class="line">&lt;style&gt;</div><div class="line">  .move-enter-active, .move-leave-active &#123;</div><div class="line">      transition: all 0.2s linear;</div><div class="line">  &#125;</div><div class="line">  .move-enter, .move-leave-active &#123;</div><div class="line">    transform: translate3d(100%, 0, 0);</div><div class="line">  &#125;</div><div class="line">&lt;/style&gt;</div></pre></td></tr></table></figure></p>
<h2 id="h5调用摄像头"><a href="#h5调用摄像头" class="headerlink" title="h5调用摄像头"></a>h5调用摄像头</h2><p>  h5调用摄像头在IOS设备和安卓设备上存在很大的兼容性问题，目前也只是实现了能打开摄像头和相册，对图片进行编辑和上传功能还没有实现(正在研究中)。<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://oszamq4pp.bkt.clouddn.com/17-7-23/857737.jpg" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure></p>
<blockquote>
<input id="fileBtn" class="fileBtn" type="file" accept="image/*" capture="camera">

</blockquote>
<ul>
<li>移动端实现图片上传并预览，需要用到h5标签input的file属性及filereader对象；<br>accept=”image/*” 表示接受的是图片(不限制格式），若想限制格式需要这样写<br>capture=”camera” 直接打开摄像头，若不加会出现选择打开相机或打开相册<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2>模仿掘金App是对Vue2.0知识的一种实践，整个做完还是很有收获的，巩固了自己的CSS布局方面的基本功，也对Vue2.0语法的具体应用场景更加清晰。</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;　　最近一段时间一直在学习Vue2.0的相关知识，之前只是看过相关的视频教学，但是一直没有动手去实践自己的项目，这次决定用Vue2.0去模仿
    
    </summary>
    
    
      <category term="Vue2.0" scheme="http://upyang.com/tags/Vue2-0/"/>
    
      <category term="ES6" scheme="http://upyang.com/tags/ES6/"/>
    
      <category term="jsonp" scheme="http://upyang.com/tags/jsonp/"/>
    
      <category term="webpack" scheme="http://upyang.com/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>Vue2.0掘金App</title>
    <link href="http://upyang.com/2017/07/21/Vue-juejin-App/"/>
    <id>http://upyang.com/2017/07/21/Vue-juejin-App/</id>
    <published>2017-07-21T09:56:15.000Z</published>
    <updated>2017-07-28T03:07:49.758Z</updated>
    
    <content type="html"><![CDATA[<div><br>    <div style="color: #061CC9;font-size: 30px;text-align: center;">掘金移动端APP</div><br>    <div style="background: #FFFFFF;font-size: 17px;box-shadow: 0 15px 20px rgba(0,0,0,0.1);padding-left: 20px;padding-right: 20px;"><br>    👉 <a href="https://github.com/Aaron0525/Vue-juejin-App" target="_blank" rel="external">https://github.com/Aaron0525/Vue-juejin-App</a><br><br>    👉 演示地址:  <a href="http://www.upyang.com/Vue-juejin-App/#/home/homepage" target="_blank" rel="external">http://www.upyang.com/Vue-juejin-App/#/home/homepage</a><br><br>    <font color="#0D3EA8"><strong>项目介绍</strong></font>：<p>&emsp;&emsp;这是一个用Vue2.0模仿的掘金App,使用了Vue2.0+ES6+webpack等前端热门技术。</p><font color="#0D3EA8"><strong>技术栈</strong></font>：<p>&emsp;&emsp;MVVM框架：Vue.js（版本2.0）轻量组件化的热门前端框架。</p><p>&emsp;&emsp;状态管理：Vuex。 采用集中式存储管理应用的所有组件的状态。</p><p>&emsp;&emsp;前端路由：Vue Router。它是Vue.js官方的路由插件，它和vue.js是深度集成的，适合用于构建单页面应用。vue的单页面应用是基于路由和组件的，路由用于设定访问路径，并将路径和组件映射起来。</p><p>&emsp;&emsp;滚动插件：better-scroll。实现了页面无滚动条形式的滚动，且在此基础上实现了首页的轮播图。</p><p>&emsp;&emsp;构建工具： webpack</p><p>&emsp;&emsp;服务端通信：axios、jsonp。从QQ音乐抓取数据显示到页面。</p><p>&emsp;&emsp;构建工具： webpack</p><br>    </div><br></div>]]></content>
    
    <summary type="html">
    
      &lt;div&gt;&lt;br&gt;    &lt;div style=&quot;color: #061CC9;font-size: 30px;text-align: center;&quot;&gt;掘金移动端APP&lt;/div&gt;&lt;br&gt;    &lt;div style=&quot;background: #FFFFFF;font-size
    
    </summary>
    
    
      <category term="Vue2.0" scheme="http://upyang.com/tags/Vue2-0/"/>
    
      <category term="ES6" scheme="http://upyang.com/tags/ES6/"/>
    
      <category term="jsonp" scheme="http://upyang.com/tags/jsonp/"/>
    
  </entry>
  
  <entry>
    <title>Vue2.0移动端音乐App</title>
    <link href="http://upyang.com/2017/07/18/Vue-music/"/>
    <id>http://upyang.com/2017/07/18/Vue-music/</id>
    <published>2017-07-18T11:02:20.000Z</published>
    <updated>2017-07-28T03:09:06.931Z</updated>
    
    <content type="html"><![CDATA[<div><br>    <div style="color: #061CC9;font-size: 30px;text-align: center;">Vue2.0搭建移动端音乐APP</div><br>    <div style="background: #FFFFFF;font-size: 17px;box-shadow: 0 15px 20px rgba(0,0,0,0.1);padding-left: 20px;padding-right: 20px;"><br>    👉 github: <a href="https://github.com/Aaron0525/Vue-music" target="_blank" rel="external">https://github.com/Aaron0525/Vue-music</a><br><br>    👉 演示地址: <a href="http://www.upyang.com/Vue-music/index.html#/recommend" target="_blank" rel="external">http://www.upyang.com/Vue-music/index.html#/recommend</a><br><br>    <font color="#0D3EA8"><strong>项目介绍</strong></font>：<p>&emsp;&emsp;这是一个用Vue.js写的移动端音乐App(SPA),使用了Vue2.0+ES6+webpack等前端热门技术。核心功能热门歌曲推荐、音乐播放、歌曲歌手搜索等。</p><font color="#0D3EA8"><strong>技术栈</strong></font>：<p>&emsp;&emsp;MVVM框架：Vue.js（版本2.0）轻量组件化的热门前端框架。</p><p>&emsp;&emsp;状态管理：Vuex。 采用集中式存储管理应用的所有组件的状态。</p><p>&emsp;&emsp;前端路由：Vue Router。它是Vue.js官方的路由插件，它和vue.js是深度集成的，适合用于构建单页面应用。vue的单页面应用是基于路由和组件的，路由用于设定访问路径，并将路径和组件映射起来。</p><p>&emsp;&emsp;滚动插件：better-scroll。实现了页面无滚动条形式的滚动，且在此基础上实现了首页的轮播图。</p><p>&emsp;&emsp;构建工具： webpack</p><p>&emsp;&emsp;服务端通信：axios、jsonp。从QQ音乐抓取数据显示到页面。</p><p>&emsp;&emsp;构建工具： webpack</p><br>    </div><br></div>]]></content>
    
    <summary type="html">
    
      &lt;div&gt;&lt;br&gt;    &lt;div style=&quot;color: #061CC9;font-size: 30px;text-align: center;&quot;&gt;Vue2.0搭建移动端音乐APP&lt;/div&gt;&lt;br&gt;    &lt;div style=&quot;background: #FFFFFF;f
    
    </summary>
    
    
      <category term="Vue2.0" scheme="http://upyang.com/tags/Vue2-0/"/>
    
      <category term="ES6" scheme="http://upyang.com/tags/ES6/"/>
    
      <category term="jsonp" scheme="http://upyang.com/tags/jsonp/"/>
    
  </entry>
  
  <entry>
    <title>原生js实现Ajax实例讲解(二)</title>
    <link href="http://upyang.com/2017/07/12/ajax2/"/>
    <id>http://upyang.com/2017/07/12/ajax2/</id>
    <published>2017-07-12T14:30:38.000Z</published>
    <updated>2017-07-16T14:43:11.553Z</updated>
    
    <content type="html"><![CDATA[<h2 id="导语"><a href="#导语" class="headerlink" title="导语"></a>导语</h2><p>Ajax的核心技术是XMLHttpRequest对象,它可以在不向服务器提交整个页面的情况下，实现局部更新网页。通过这个对象，Ajax可以像桌面应用程序那样只与服务器进行数据层的交换，而不必每次都刷新界面，也不必每次将数据处理的工作都交给服务器来做。这样既减轻了服务器负担又提高了响应速度，还缩短了用户的等待时间。通常一个Ajax的实现过程有五步，下面我们以<a href="http://www.upyang.com/2017/07/12/ajax/" target="_blank" rel="external">上篇博客中的小实例</a>为例来逐步学习。</p>
<h2 id="XMLHttpRequest对象的五步使用法"><a href="#XMLHttpRequest对象的五步使用法" class="headerlink" title="XMLHttpRequest对象的五步使用法"></a>XMLHttpRequest对象的五步使用法</h2><h3 id="创建XMLHttpRequest对象。"><a href="#创建XMLHttpRequest对象。" class="headerlink" title="创建XMLHttpRequest对象。"></a>创建XMLHttpRequest对象。</h3><p>IE浏览器将XMLHttpRequest实现为一个ActiveX对象，其他浏览器如Firefox，Opera，Netscape等将其实现为一个本地JavaScript对象。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">function CreatXHR()</div><div class="line">    &#123;</div><div class="line">        //判断浏览器是否支持ActiveX控件，针对IE6及之前版本</div><div class="line">        if (window.ActiveXObject)</div><div class="line">        &#123;</div><div class="line">            //将所有可能出现的ActiveXObject版本都放在一个数组中</div><div class="line">            var arrXHR = [&apos;Microsoft.XMLHTTP&apos;, &apos;MSXML2.XMLHTTP.6.0&apos;, &apos;MSXML2.XMLHTTP.5.0&apos;, &apos;MSXML2.XMLHTTP.4.0&apos;, &apos;MSXML2.XMLHTTP.3.0&apos;, &apos;MSXML2.XMLHTTP&apos;];</div><div class="line">            //通过循环创建XMLHttpRequest对象</div><div class="line">            var temp = arrXHR.length;</div><div class="line">            for (var i=0;i&lt;temp;i++)</div><div class="line">            &#123;</div><div class="line">                try</div><div class="line">                &#123;</div><div class="line">                    //创建XMLHttpRequest对象</div><div class="line">                    xhr = new ActiveXObject(arrXHR[i]);</div><div class="line">                    //如果创建XMLHttpRequest对象成功，则跳出循环</div><div class="line">                    break;</div><div class="line">                &#125;</div><div class="line">                catch(ex)</div><div class="line">                &#123;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        //判断浏览器是否将XMLHttpRequest作为本地对象实现，针对IE7，Firefox，Opera等浏览器</div><div class="line">        else if(window.XMLHttpRequest)</div><div class="line">        &#123;</div><div class="line">            xhr = new XMLHttpRequest();</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">//创建XMLHttpRequest对象，调用前面定义好的函数</div><div class="line">    creatXMLHTTP();</div><div class="line">    if (xhr!=null)</div><div class="line">    &#123;</div><div class="line">        //创建响应XMLHttpRequest对象状态变化的函数</div><div class="line"></div><div class="line">        //创建http请求</div><div class="line"></div><div class="line">        //发送http请求</div><div class="line"></div><div class="line">    &#125;</div><div class="line">    else</div><div class="line">    &#123;</div><div class="line">        alert(&quot;您的浏览器不支持XMLHTTP&quot;);</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h3 id="注册回调函数"><a href="#注册回调函数" class="headerlink" title="注册回调函数"></a>注册回调函数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">//创建响应XMLHttpRequest对象状态变化的函数</div><div class="line">    xhr.onreadystatechange = httpStateChange;</div></pre></td></tr></table></figure>
<p>在异步调用时，XMLHttpRequest对象有几个不同的状态，这些状态表示了异步调用的过程。<br>　　0：未初始化状态，刚创建完一个XMLHttpRequest对象；<br>　　1：初始化状态，即XMLHttpRequest对象已经获得了要将数据发送到哪个服务器上、以什么方式发送等信息；<br>　　2：发送状态，XMLHttpRequest开始发送数据；<br>　　3：数据传送状态，此时XMLHttpRequest正在接受从服务器端返回的数据，但是数据还没有传送完毕；<br>　　4：完成状态：此时XMLHttpRequest对象已经将从服务器端返回的数据接受完毕。<br>使用XMLHttpRequest对象的onreadystatechange属性，可以设置响应XMLHttpRequest对象状态变化的函数。设置回调函数时，不要在函数名后而加括号。加括号表示将回调函数的返回值注册给onreadystatechange属性。</p>
<h3 id="open方法设置和服务器端交互的信息"><a href="#open方法设置和服务器端交互的信息" class="headerlink" title="open方法设置和服务器端交互的信息"></a>open方法设置和服务器端交互的信息</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">//创建http请求</div><div class="line">    xhr.open(&quot;get&quot;,&quot;Readme.txt&quot;, true);</div></pre></td></tr></table></figure>
<blockquote>
<p>请求根目录下存储用户名为Readme的txt文件,稍后利用它进行用户名的验证。</p>
</blockquote>
<p>XMLHttpRequest的open(method,URL,flag,name,password)方法用来初始化对象，前两个参数必选，后三个参数是可选。<br>method：指定用什么方式向服务器发送http请求，参数值可以是get，post，head，put和delete五种。<br>URL：指定服务器的URL，也就是用户处理和返回数据的程序的URL。该URL可以是绝对地址，也可以是相对地址。<br>flag：指定提交http请求的方式，true指异步方式，为默认值；false指同步方式。<br>name和password：如果服务器需要验证，这两个参数用来提交用户名和密码。</p>
<h3 id="设置发送的数据与服务器端开始交互。"><a href="#设置发送的数据与服务器端开始交互。" class="headerlink" title="设置发送的数据与服务器端开始交互。"></a>设置发送的数据与服务器端开始交互。</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">//发送http请求</div><div class="line">    xhr.send(null);</div></pre></td></tr></table></figure>
<p>发送http请求使用XMLHttpRequest的send(data)方法，data参数就是传递给open()方法中URL参数所指定的文件的参数。若果要传递多个参数，用”&amp;”来分隔，不需要传递参数写”null”。</p>
<h3 id="回调函数中判断交互是否结束"><a href="#回调函数中判断交互是否结束" class="headerlink" title="回调函数中判断交互是否结束"></a>回调函数中判断交互是否结束</h3><h4 id="判断异步调用是否成功："><a href="#判断异步调用是否成功：" class="headerlink" title="判断异步调用是否成功："></a>判断异步调用是否成功：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">if (xhr.readyState==4)//异步调用完毕</div><div class="line">&#123;</div><div class="line">    if (xhr.status==200 || xhr.status==0)&#123;&#125;//异步调用成功||在本机上调试</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>readyState属性值为4，说明异步调用完成，但并不代表异步调用执行成功。XMLHttpRequest的status属性可以获得从服务器返回的状态码。0代表不能理解的http状态，通常只有在本地计算机打开文件时才会返回。比较常用的http状态码有以下三个：<br>200：服务器成功返回网页。<br>404：客户端请求的网页不存在。<br>503：服务器响应超时。</p>
<h4 id="获得服务器返回的数据"><a href="#获得服务器返回的数据" class="headerlink" title="获得服务器返回的数据"></a>获得服务器返回的数据</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">if (xhr.readyState==4)</div><div class="line">&#123;</div><div class="line">    if (xhr.status==200 || xhr.status==0)&#123;</div><div class="line">        var Names = xhr.responseText;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>异步调用的最终目的是接收从服务器返回的数据，并根据该数据决定如何显示在客户端网页中。异步调用成功后，XMLHttpRequest对象通过使用以下4个属性来获得服务器返回的数据。<br>responseText：表示将服务器返回的数据以字符串形式返回。<br>responseXML：表示以XML的形式返回。<br>responseBody：表示以unsigned byte数组的形式返回。<br>responseStream：表示以IStream对象的形式返回。</p>
<h4 id="局部更新"><a href="#局部更新" class="headerlink" title="局部更新"></a>局部更新</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">var OWarn = document.getElementById(&quot;Warn&quot;);</div><div class="line">if (Flag)</div><div class="line">&#123;</div><div class="line">    OWarn.innerHTML = &quot;您输入的用户名已存在，请重新输入！&quot;;</div><div class="line">    Form.Btn.disabled = true;//提交按钮不可用</div><div class="line">&#125;</div><div class="line">else</div><div class="line">&#123;</div><div class="line">    OWarn.innerHTML = &quot;合法用户名&quot;;</div><div class="line">    Form.Btn.disabled = false;//提交按钮可用</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>获取服务器返回的数据之后就要显示出来。Ajax通过DOM来完成局部更新数据。</p>
<h2 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h2><p> 在ajax的编程中是必须对XMLHttpRequest进行上述的5步操作的，封装成一个具有复用性效果的方法，对我们的日常使用是非常来说是非常方便的。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;导语&quot;&gt;&lt;a href=&quot;#导语&quot; class=&quot;headerlink&quot; title=&quot;导语&quot;&gt;&lt;/a&gt;导语&lt;/h2&gt;&lt;p&gt;Ajax的核心技术是XMLHttpRequest对象,它可以在不向服务器提交整个页面的情况下，实现局部更新网页。通过这个对象，Ajax可以像
    
    </summary>
    
    
      <category term="jsonp" scheme="http://upyang.com/tags/jsonp/"/>
    
      <category term="ajax" scheme="http://upyang.com/tags/ajax/"/>
    
      <category term="XMLHttpRequest" scheme="http://upyang.com/tags/XMLHttpRequest/"/>
    
  </entry>
  
  <entry>
    <title>原生js实现Ajax实例讲解(一)</title>
    <link href="http://upyang.com/2017/07/12/ajax/"/>
    <id>http://upyang.com/2017/07/12/ajax/</id>
    <published>2017-07-12T02:02:20.000Z</published>
    <updated>2017-07-16T14:44:18.440Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Ajax简介"><a href="#Ajax简介" class="headerlink" title="Ajax简介"></a>Ajax简介</h2><ul>
<li>ajax = 异步 JavaScript 和 XML。</li>
<li>ajax是一种在无需重新加载整个网页的情况下，能够更新部分网页的技术。我们知道，传统的网页（不使用ajax）如果需要更新内容，必须重新加载整个网页。Ajax的出现，使得使网可以实现异步更新，这意味着可以在不重新加载整个网页的情况下，对网页的某部分进行更新。</li>
<li>注意：ajax本身不支持跨域请求，需要在服务器端处理。</li>
</ul>
<h2 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h2><ul>
<li>ajax的技术核心是 XMLHttpRequest 对象。</li>
<li>ajax请求过程：创建XMLHttpRequest、连接服务器、发送请求、服务器做出响应、接收响应数据</li>
<li>图示：</li>
</ul>
<p><img src="http://www.runoob.com/images/ajax.gif"></p>
<h2 id="ajax与jsonp"><a href="#ajax与jsonp" class="headerlink" title="ajax与jsonp"></a>ajax与jsonp</h2><h3 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h3><p>从实现方式上来讲，ajax是通过创建XMLHttpRequest来获取<a href="http://www.upyang.com/2017/07/08/jsonp%E8%B7%A8%E5%9F%9F%E5%AE%9E%E7%8E%B0/" target="_blank" rel="external">同源</a>的数据。而jsonp是通过<code>&lt;script&gt;</code>标签来调用服务器提供的js脚本。</p>
<h3 id="jsonp产生原因"><a href="#jsonp产生原因" class="headerlink" title="jsonp产生原因"></a>jsonp产生原因</h3><p>　1. Ajax直接请求普通文件存在跨域无权限访问的问题（静态页、动态页、web服务、wcf只要是跨域请求一律不准）<br>　2. web的页面上调用js文件是不受跨域的影响（凡拥有src属性的标签都拥有跨域能力script img iframe）<br>　3. 可以判断 现在想通过纯web端(ActiveX控件、服务端代理、H5之Websocket等方式不算)跨域访问数据就只有一种可能，就是在远程服务器上设法把数据装进js格式的文件里，供客户度调用和进一步处理；<br>　4. json的纯字符数格式可以简洁的描述复杂数据还被js原生支持<br>　5. web客户端通过与调用脚本一样的方式来调用跨域服务器上动态生成的js格式文件(后缀.json)，服务器之所以要动态生成json文件目的把客户端需要的数据装入进去<br>　6. 客户端在对json文件调用成功后获得自己所需的数据剩下的就按照自己需求进行处理和展现，这种获取远程数据的方式非常像ajax其实并一样<br>　7. 为了方便客户端使用数据逐渐形成非正式传输协议jsonp</p>
<ul>
<li><p>其实，说到ajax就会面临两个不可避免的问题，<i style="color:red">一是以何种格式来减缓数据；二是如何解决跨域问题。</i>目前来说，所被推崇的方案是JSON作数据交换，JSONP来解决跨域问题。</p>
</li>
<li><p>JSON与JSONP虽然看上去只有一字之差，但是实际上根本不是一回事。JSON是一种key/value形式的数据格式，二JSONP则是一种跨域数据交互协议。</p>
</li>
</ul>
<h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><ul>
<li>题目：注册时，会要求输入用户名和密码，同时要验证用户名是否合法。</li>
<li>实现功能，用户在输入用户名后，需要给出提醒该名称是否已经存在。<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://oszamq4pp.bkt.clouddn.com/17-7-12/37926292.jpg" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
</li>
</ul>
<h3 id="html文档结构"><a href="#html文档结构" class="headerlink" title="html文档结构"></a>html文档结构</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE HTML&gt;</div><div class="line">&lt;html&gt;</div><div class="line">&lt;head&gt;</div><div class="line">    &lt;meta charset=&quot;utf-8&quot;&gt;</div><div class="line">    &lt;title&gt;Ajax实例详解&lt;/title&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">    &lt;div class=&quot;reg&quot; style=&quot;margin-top: 50px;margin-left:100px;&quot;&gt;</div><div class="line">      &lt;p&gt;注册页(ajax检测用户名是否合法)&lt;/p&gt;</div><div class="line">      &lt;form name=&quot;Form&quot;&gt;</div><div class="line">      用户名: &lt;input type=&quot;text&quot; name=&quot;Name&quot; onblur=&quot;check()&quot;&gt;</div><div class="line">      &lt;span id=&quot;myDiv&quot;&gt;&lt;/span&gt;&lt;br&gt;</div><div class="line">      密　码: &lt;input type=&quot;text&quot; name=&quot;Password&quot;&gt;&lt;br&gt;</div><div class="line">      &lt;input type=&quot;button&quot; value=&quot; 提交&quot; name=&quot;Btn&quot; disabled=&quot;false&quot;&gt;</div><div class="line">    &lt;/form&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<h3 id="JavaScript代码"><a href="#JavaScript代码" class="headerlink" title="JavaScript代码"></a>JavaScript代码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div></pre></td><td class="code"><pre><div class="line">&lt;script type=&quot;text/javascript&quot;&gt;</div><div class="line">    //初始化一个存储XMLHttpRequest对象的变量</div><div class="line">    var xhr = null;</div><div class="line">    //定义一个函数用来创建XMLHttpRequest对象,兼容各个版本</div><div class="line">    function CreatXHR()</div><div class="line">    &#123;</div><div class="line">        //判断浏览器是否支持ActiveX控件，针对IE6及之前版本</div><div class="line">        if (window.ActiveXObject)</div><div class="line">        &#123;</div><div class="line">            //将所有可能出现的ActiveXObject版本都放在一个数组中</div><div class="line">            var arrXHR = [&apos;Microsoft.XMLHTTP&apos;, &apos;MSXML2.XMLHTTP.6.0&apos;, &apos;MSXML2.XMLHTTP.5.0&apos;, &apos;MSXML2.XMLHTTP.4.0&apos;, &apos;MSXML2.XMLHTTP.3.0&apos;, &apos;MSXML2.XMLHTTP&apos;];</div><div class="line">            //通过循环创建XMLHttpRequest对象</div><div class="line">            var temp = arrXHR.length;</div><div class="line">            for (var i=0;i&lt;temp;i++)</div><div class="line">            &#123;</div><div class="line">                try</div><div class="line">                &#123;</div><div class="line">                    //创建XMLHttpRequest对象</div><div class="line">                    xhr = new ActiveXObject(arrXHR[i]);</div><div class="line">                    //如果创建XMLHttpRequest对象成功，则跳出循环</div><div class="line">                    break;</div><div class="line">                &#125;</div><div class="line">                catch(ex)</div><div class="line">                &#123;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        //判断浏览器是否将XMLHttpRequest作为本地对象实现，针对IE7，Firefox，Opera等浏览器</div><div class="line">        else if(window.XMLHttpRequest)</div><div class="line">        &#123;</div><div class="line">            xhr = new XMLHttpRequest();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    //响应XMLHttpRequest对象状态变化的函数</div><div class="line">    function httpStateChange()</div><div class="line">    &#123;</div><div class="line">        if (xhr.readyState==4)//异步调用完毕</div><div class="line">        &#123;</div><div class="line">            if (xhr.status==200 || xhr.status==0)//异步调用成功，在本机上调试</div><div class="line">            &#123;</div><div class="line">                //获得服务器返回的数据</div><div class="line">                var Names = xhr.responseText;</div><div class="line">                var arrName = Names.split(&quot;;&quot;);//把获取到的一个字符串分割成字符串数组。</div><div class="line"></div><div class="line">                //定义一个变量，用于判断用户名是否已经存在</div><div class="line">                var Flag = false;</div><div class="line"></div><div class="line">                for(i=0;i&lt;arrName.length;i++)</div><div class="line">                &#123;</div><div class="line">                    if (arrName[i]== Form.Name.value)</div><div class="line">                    &#123;</div><div class="line">                        Flag = true;//用户名存在</div><div class="line">                        break;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                //合法性验证提醒</div><div class="line">                var OWarn = document.getElementById(&quot;Warn&quot;);</div><div class="line">                if (Flag)</div><div class="line">                &#123;</div><div class="line">                    OWarn.innerHTML = &quot;您输入的用户名已存在，请重新输入！&quot;;</div><div class="line">                    Form.Btn.disabled = true;//提交按钮不可用</div><div class="line">                &#125;</div><div class="line">                else</div><div class="line">                &#123;</div><div class="line">                    OWarn.innerHTML = &quot;合法用户名&quot;;</div><div class="line">                    Form.Btn.disabled = false;//提交按钮可用</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    //校验用户名是否有效</div><div class="line">    function check()</div><div class="line">    &#123;</div><div class="line">        //创建XMLHttpRequest对象，调用前面定义好的函数</div><div class="line">        CreatXHR();</div><div class="line"></div><div class="line">        if (xhr!=null)</div><div class="line">        &#123;</div><div class="line">            //创建响应XMLHttpRequest对象状态变化的函数</div><div class="line">            xhr.onreadystatechange = httpStateChange;</div><div class="line">            //创建http请求</div><div class="line">            xhr.open(&quot;get&quot;,&quot;Readme.txt&quot;, true);</div><div class="line">            //发送http请求</div><div class="line">            xhr.send(null);</div><div class="line">        &#125;</div><div class="line">        else</div><div class="line">        &#123;</div><div class="line">            alert(&quot;您的浏览器不支持XMLHTTP&quot;);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure>
<h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p> 注意：需要在html同级目录下创建一个Reademe.txt文件来存储已经存在的用户名，多个用户名之间用分好隔开。<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://oszamq4pp.bkt.clouddn.com/17-7-12/4894833.jpg" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure></p>
<h3 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h3><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://oszamq4pp.bkt.clouddn.com/17-7-12/22625927.jpg" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://oszamq4pp.bkt.clouddn.com/17-7-12/1123101.jpg" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>可以复制代码亲自试看下效果哦！(建议Firefox下调试)<br>详细代码讲解请看下一章<a href="http://www.upyang.com/2017/07/12/ajax/" target="_blank" rel="external">通俗易懂Ajax实例讲解(二)</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Ajax简介&quot;&gt;&lt;a href=&quot;#Ajax简介&quot; class=&quot;headerlink&quot; title=&quot;Ajax简介&quot;&gt;&lt;/a&gt;Ajax简介&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;ajax = 异步 JavaScript 和 XML。&lt;/li&gt;
&lt;li&gt;ajax是一种在无需重
    
    </summary>
    
    
      <category term="jsonp" scheme="http://upyang.com/tags/jsonp/"/>
    
      <category term="ajax" scheme="http://upyang.com/tags/ajax/"/>
    
      <category term="XMLHttpRequest" scheme="http://upyang.com/tags/XMLHttpRequest/"/>
    
  </entry>
  
  <entry>
    <title>响应式网站设计</title>
    <link href="http://upyang.com/2017/07/09/Responsive-website/"/>
    <id>http://upyang.com/2017/07/09/Responsive-website/</id>
    <published>2017-07-09T06:35:42.000Z</published>
    <updated>2017-07-28T03:01:53.577Z</updated>
    
    <content type="html"><![CDATA[<div><br>    <div style="color: #061CC9;font-size: 30px;text-align: center;">响应式网站</div><br>    <div style="background: #FFFFFF;font-size: 17px;box-shadow: 0 15px 20px rgba(0,0,0,0.1);padding-left: 20px;padding-right: 20px;"><br>    👉 github: <a href="https://github.com/Aaron0525/Responsive-website" target="_blank" rel="external">https://github.com/Aaron0525/Responsive-website</a><br><br>    👉 演示地址: <a href="http://www.upyang.com/Responsive-website/" target="_blank" rel="external">http://www.upyang.com/Responsive-website/</a><br><br>    <font color="#0D3EA8"><strong>项目介绍</strong></font>：<p>&emsp;&emsp;响应式网站设计(Responsive Web design)的理念是：集中创建页面的图片排版大小，可以智能地根据用户行为以及使用的设备环境（系统平台、屏幕尺寸、屏幕定向等）进行相对应的布局。</p><font color="#0D3EA8"><strong>响应式布局要点</strong></font>：<br>    <p>&emsp;&emsp;一、媒体查询（media query）。媒体查询是响应式网页的核心，它能检测当前设备的宽度来选用不同的CSS样式文件。在写CSS样式时，从最小的设备开始写为好。</p><p>&emsp;&emsp;二、流式布局。它的特点就是百分比布局，相比采用具体尺寸的布局，百分比布局在用户缩放浏览器窗口时，不会出现内容被隐藏和出现横向滚动条。</p><p>&emsp;&emsp;三、弹性图片。　要让图片自适应缩放，一般使用css将图片的宽度设置成100%，这样就能使图片在布局中保持特定的比例。但随着浏览器的缩放，当图片的实际大小超过图片本身的大小时，图片就会变的模糊。有效的解决方案，就是及时替换成一张尺寸更大的图片。</p><font color="#0D3EA8"><strong>响应式布局优缺点</strong></font>：<br>    <p>&emsp;&emsp;优点：在不同终端、不同分辨率下有很强的适配性；只需一套代码，一定程度上节省了开发和维护的成本。缺点：兼容各种设备工作量大，效率低下；代码累赘，会出现隐藏无用的元素，加载时间加长。</p><p>&emsp;&emsp;所以响应式布局不适合数据量大，操作复杂的网站，适用于博客、中小型企业网站等。</p><br>    </div><br></div>
]]></content>
    
    <summary type="html">
    
      &lt;div&gt;&lt;br&gt;    &lt;div style=&quot;color: #061CC9;font-size: 30px;text-align: center;&quot;&gt;响应式网站&lt;/div&gt;&lt;br&gt;    &lt;div style=&quot;background: #FFFFFF;font-size: 1
    
    </summary>
    
    
      <category term="HTML5" scheme="http://upyang.com/tags/HTML5/"/>
    
      <category term="CSS3" scheme="http://upyang.com/tags/CSS3/"/>
    
      <category term="media" scheme="http://upyang.com/tags/media/"/>
    
  </entry>
  
  <entry>
    <title>jsonp跨域实现</title>
    <link href="http://upyang.com/2017/07/08/jsonp%E8%B7%A8%E5%9F%9F%E5%AE%9E%E7%8E%B0/"/>
    <id>http://upyang.com/2017/07/08/jsonp跨域实现/</id>
    <published>2017-07-08T10:57:30.000Z</published>
    <updated>2017-07-09T15:25:11.436Z</updated>
    
    <content type="html"><![CDATA[<h1 id="同源策略"><a href="#同源策略" class="headerlink" title="同源策略"></a>同源策略</h1><p>在JavaScript中，有一个很重要的安全性限制，被称为“Same-Origin Policy”（同源策略）。这一策略对于JavaScript代码能够访问的页面内容做了很重要的限制，即JavaScript只能访问与包含它的文档在同一域下的内容。（图片来自MDN）</p>
<p><img src="http://img.blog.csdn.net/20170507170944865?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvaG9wZV9JdA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast"></p>
<h1 id="JSONP"><a href="#JSONP" class="headerlink" title="JSONP"></a>JSONP</h1><p>在js中，我们直接用XMLHttpRequest请求不同域上的数据时，是不可以的。但是，在页面上用标签引入<code>&lt;script&gt;</code>不同域上的js脚本文件却是可以的，jsonp正是利用这个特性来实现的。</p>
<li>jsonp的客户端实现</li>

<p>tocat服务器上有个remote.js（这里用tocat，web项目演示）</p>
<p><img src="http://img.blog.csdn.net/20170507182922130?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvaG9wZV9JdA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast"></p>
<p><code>alert(&quot;跨域成功&quot;);</code><br>　　<li>本地index.html文件</li></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE&gt;</div><div class="line">&lt;html&gt;</div><div class="line">&lt;head&gt;</div><div class="line">&lt;title&gt;跨域资源&lt;/title&gt;</div><div class="line">&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html;charset=utf-8&quot; /&gt;</div><div class="line">/* 完成跨域 */</div><div class="line">&lt;script src=&quot;http://localhost:8080/web/js/remote.js&quot;&gt;&lt;/script&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<p><img src="http://img.blog.csdn.net/20170507182807316?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvaG9wZV9JdA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast"></p>
<p>　　很明显，显示跨域成功</p>
<li>接下来我们在本地index.html定义callback函数 ，然后远程tomcat.js传入回调数据</li>

<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE&gt;</div><div class="line">&lt;html&gt;</div><div class="line">&lt;head&gt;</div><div class="line">    &lt;title&gt;跨域资源&lt;/title&gt;</div><div class="line">    &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html;charset=utf-8&quot; /&gt;</div><div class="line">    /* 完成跨域 */</div><div class="line">     &lt;script type=&quot;text/javascript&quot;&gt;</div><div class="line">         window.onload = function() &#123;</div><div class="line">         var callback = function(data) &#123;</div><div class="line">            alert(&quot;跨域调用远程tomcat.js成功: &quot; + data.name);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    &lt;/script&gt;</div><div class="line">    &lt;script src=&quot;http://localhost:8080/web/js/tomcat.js&quot;&gt;&lt;/script&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<p>远程服务器：</p>
<p>tomcat.js</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">callback(&#123;&quot;name&quot;:&quot;kk&quot;&#125;);</div></pre></td></tr></table></figure>
<p>到此，跨域基本实现，但是这里有个问题，<i style="color:red">远程站点怎么知道要调用哪个callback呢？</i></p>
<p>所以就有了jsonp的核心：服务端提供的callback是动态生成的， 本地只要动态传一个callback给服务端，服务端就知道该调用哪个了</p>
<p>像这样：<br>客户端<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE&gt;</div><div class="line">&lt;html&gt;</div><div class="line">&lt;head&gt;</div><div class="line">    &lt;title&gt;跨域资源&lt;/title&gt;</div><div class="line">    &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html;charset=utf-8&quot; /&gt;</div><div class="line">    &lt;script type=&quot;text/javascript&quot;&gt;</div><div class="line">    window.onload = function() &#123;</div><div class="line">        var callback = function(data) &#123;</div><div class="line">            alert(&quot;跨域调用远程成功: &quot; + data.name);</div><div class="line">        &#125;</div><div class="line">        var url = &quot;http://localhost:8080/web/js/helloServlet?userid=1&amp;callback=callback&quot;;</div><div class="line">        // 创建script标签，设置其属性</div><div class="line">        var script = document.createElement(&apos;script&apos;);</div><div class="line">        script.setAttribute(&apos;src&apos;, url);</div><div class="line">        // 把script标签加入head，此时调用开始</div><div class="line">        document.getElementsByTagName(&apos;head&apos;)[0].appendChild(script);</div><div class="line">    &#125;</div><div class="line">    &lt;/script&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure></p>
<p>服务端：（这里选用java解释）<br>// 从客户端获取参数userid和callback<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">PrintWriter out =response.getWriter();</div></pre></td></tr></table></figure></p>
<p>// 根据userid查找到的数据存储为json<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">out.println(callback+&quot;(&quot;+json+&quot;)&quot;);</div></pre></td></tr></table></figure></p>
<p><img src="http://img.blog.csdn.net/20170507191945153?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvaG9wZV9JdA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast"></p>
<p>jsonp的执行全过程就是这么回事了（个人理解）</p>
<li>现在再来看JQuery中的实现，我们最经常用的$.ajax，似乎通透了不少，也就是这么回事<br></li>

<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">$(function() &#123;</div><div class="line">        $.ajax(&#123;</div><div class="line">            async: false,</div><div class="line">            url: http, //跨域url地址</div><div class="line">            type: &quot;GET&quot;,</div><div class="line">            dataType: &apos;jsonp&apos;,</div><div class="line">            jsonp: &apos;jsoncallback&apos;,</div><div class="line">            data: &#123;</div><div class="line">                &quot;userid&quot;: &quot;1&quot;</div><div class="line">            &#125;,</div><div class="line">            timeout: 5000,</div><div class="line">            beforeSend: function() &#123;</div><div class="line">                //jsonp 方式此方法不被触发.原因可能是dataType如果指定为jsonp的话,就已经不是ajax事件了</div><div class="line">            &#125;,</div><div class="line">            success: function(json) &#123; //客户端jquery预先定义好的callback函数,成功获取跨域服务器上的json数据后,会动态执行这个callback函数</div><div class="line"></div><div class="line">            &#125;</div><div class="line"></div><div class="line">            error: function(xhr) &#123;</div><div class="line">                //jsonp 方式此方法不被触发.原因是:dataType如果指定为jsonp的话,就已经不是ajax事件了</div><div class="line">                //请求出错处理</div><div class="line">                alert(&quot;请求出错(请检查相关度网络状况.)&quot;);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;)</div></pre></td></tr></table></figure>
<p>这里发现，$.ajax和ajax并不是一回事啊,ajax的核心是通过XmlHttpRequest获取非本页内容，而jsonp的核心则是动态添加<code>&lt;script&gt;</code>标签来调用服务器提供的js脚本。</p>
<h1 id="window-name"><a href="#window-name" class="headerlink" title="window.name"></a>window.name</h1><p>注意，window.name的值只能是字符串的形式，这个字符串的大小最大能允许2M左右甚至更大的一个容量，具体取决于不同的浏览器，但一般是够用了。<br>实例：<br>假设有三个页面：<br><a href="http://a.com/a.html" target="_blank" rel="external">http://a.com/a.html</a>  //渴望获得数据的页面<br><a href="http://a.com/b.html" target="_blank" rel="external">http://a.com/b.html</a>  //a的兄弟页面，充当中间人角色<br><a href="http://b.com/data.html" target="_blank" rel="external">http://b.com/data.html</a> //不同源的数据页</p>
<li><a href="http://a.com/a.html,监听iframe的onload事件，在此事件中设置这个iframe的src指向本地域的代理页面http://a.com/b.html（代理文件和应用页面在同一域下，所以可以相互通信）" target="_blank" rel="external">http://a.com/a.html,监听iframe的onload事件，在此事件中设置这个iframe的src指向本地域的代理页面http://a.com/b.html（代理文件和应用页面在同一域下，所以可以相互通信）</a><br>动态创建iframe</li>

<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">&lt;script type=&quot;text/javascript&quot;&gt;</div><div class="line"></div><div class="line">var state = 0,</div><div class="line">    iframe = document.createElement(&apos;iframe&apos;);</div><div class="line"></div><div class="line">// 通过iframe的src与data.html通信</div><div class="line">iframe.src = &apos;http://b.com/data.html&apos;;</div><div class="line"></div><div class="line">//监听onload</div><div class="line">if (iframe.attachEvent) &#123;</div><div class="line">    iframe.attachEvent(&apos;onload&apos;, loadfn);</div><div class="line">&#125; else &#123;</div><div class="line">    iframe.onload = loadfn;</div><div class="line"></div><div class="line">var loadfn = function() &#123;</div><div class="line">        if (state === 0) &#123;</div><div class="line">            state = 1;</div><div class="line">            iframe.contentWindow.location = &quot;http://a.com/b.html&quot;; // 设置的代理页面</div><div class="line">        &#125;</div><div class="line">        else if (state === 1) &#123;</div><div class="line">            var data = iframe.contentWindow.name; // 读取数据</div><div class="line">            alert(data); //弹出&apos;data.html!&apos;</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line">&lt;/script&gt;</div><div class="line">  ● http://b.com/data.html</div><div class="line">&lt;script type=&quot;text/javascript&quot;&gt;</div><div class="line">    window.name = &apos;data.html&apos;;</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure>
<p>这样就可以成功解决了，理一下思路，应该是这样:<br>充当中间人的iframe想要获取到data.html的通过window.name设置的数据，只需要把这个iframe的src设为www.cnblogs.com/data.html就行了。然后a.html想要得到iframe所获取到的数据，也就是想要得到iframe的window.name的值，还必须把这个iframe的src设成跟a.html页面同一个域才行</p>
<p>图示：<br><img src="http://img.blog.csdn.net/20170507203413041?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvaG9wZV9JdA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt=""></p>
<h1 id="HTML5中新引进的window-postMessage方法"><a href="#HTML5中新引进的window-postMessage方法" class="headerlink" title="HTML5中新引进的window.postMessage方法"></a>HTML5中新引进的window.postMessage方法</h1><p>在HTML5中新增了postMessage方法，postMessage可以实现跨文档消息传输（Cross Document Messaging），Internet Explorer 8, Firefox 3, Opera 9, Chrome 3和 Safari 4都支持postMessage。<br>实现：<br>发送信息的页面<a href="http://a.com/a.html" target="_blank" rel="external">http://a.com/a.html</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html lang=&quot;en&quot;&gt;</div><div class="line"></div><div class="line">&lt;head&gt;</div><div class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</div><div class="line">    &lt;title&gt;客户端&lt;/title&gt;</div><div class="line">    &lt;script type=&quot;text/javascript&quot;&gt;</div><div class="line">    window.onload = function() &#123;</div><div class="line">        window.frames[0].postMessage(&apos;data&apos;, &apos;http://b.com/data.html&apos;);</div><div class="line">        //postMessage接收两个参数，第一个数据，第二个字符串参数，指明目标窗口的源，具体看MDN</div><div class="line">    &#125;</div><div class="line">    &lt;/script&gt;</div><div class="line">&lt;/head&gt;</div><div class="line"></div><div class="line">&lt;body&gt;</div><div class="line">    &lt;iframe id=&quot;child&quot; src=&quot;http://b.com/data.html&quot;&gt;&lt;/iframe&gt;</div><div class="line">&lt;/body&gt;</div><div class="line"></div><div class="line">&lt;/html&gt;</div><div class="line">接收信息的页面http://b.com/data.html</div><div class="line">// 通过监听message事件获取数据</div><div class="line">window.addEventListener(&apos;message&apos;,function(e)&#123;</div><div class="line">                var e =e||event;</div><div class="line">                alert(e.data);</div><div class="line">            &#125;,false);</div></pre></td></tr></table></figure></p>
<p>图示：<br><img src="http://img.blog.csdn.net/20170507211511202?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvaG9wZV9JdA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt=""></p>
<h1 id="跨域资源共享（CORS）"><a href="#跨域资源共享（CORS）" class="headerlink" title="跨域资源共享（CORS）"></a>跨域资源共享（CORS）</h1><p>CORS是一个W3C标准，全称是”跨域资源共享”（Cross-origin resource sharing）。</p>
<p>它允许浏览器向跨源服务器，发出XMLHttpRequest请求，从而克服了AJAX只能同源使用的限制。<br>　　整个CORS通信过程，都是浏览器自动完成，不需要用户参与。对于开发者来说，CORS通信与同源的AJAX通信没有差别，代码完全一样。浏览器一旦发现AJAX请求跨源，就会自动添加一些附加的头信息，有时还会多出一次附加的请求，但用户不会有感觉。<br>因此，实现CORS通信的关键是服务器。只要服务器实现了CORS接口，就可以跨源通信。具体原理参见MDN</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;同源策略&quot;&gt;&lt;a href=&quot;#同源策略&quot; class=&quot;headerlink&quot; title=&quot;同源策略&quot;&gt;&lt;/a&gt;同源策略&lt;/h1&gt;&lt;p&gt;在JavaScript中，有一个很重要的安全性限制，被称为“Same-Origin Policy”（同源策略）。这一策略对于
    
    </summary>
    
    
      <category term="HTML5" scheme="http://upyang.com/tags/HTML5/"/>
    
      <category term="JavaScript" scheme="http://upyang.com/tags/JavaScript/"/>
    
      <category term="Jsonp" scheme="http://upyang.com/tags/Jsonp/"/>
    
      <category term="CORS" scheme="http://upyang.com/tags/CORS/"/>
    
  </entry>
  
</feed>
